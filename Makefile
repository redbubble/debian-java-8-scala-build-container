IMAGE_NAME = debian-java-8-scala-build
BUILDKITE_BRANCH ?= $(shell git rev-parse --abbrev-ref HEAD)
BUILDKITE_BUILD_NUMBER ?= 0

.PHONY: all help

help:
	@printf "\n\033[32mEnvironment Variables\033[0m\n"
	@cat $(MAKEFILE_LIST) | egrep -o "\\$$\{[a-zA-Z0-9_]*\}" | sort | uniq | \
		sed -E 's/^[\$$\{]*|\}$$//g' | xargs -I % echo % % | \
		xargs printf "echo \"\033[93m%-30s\033[0m \$$(printenv %s)\n\"" | bash | sed "s/echo //"
	@printf "\n\033[32mMake Targets\033[0m\n"
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
	@echo ""

build: ## Create the docker image.
	@echo "--- :wind_chime: Building :wind_chime:"
	docker image build --pull --no-cache -t ${IMAGE_NAME}:latest .

tag: build ## Tag the docker images with the build information.
	@echo "--- :label: Tagging image :label:"
	docker image tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${BUILDKITE_BRANCH}
	docker image tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${BUILDKITE_BUILD_NUMBER}

push: tag ## Push the docker image to the registry.
	@echo "--- :satellite: Pushing to docker registry :satellite:"
	docker image push ${IMAGE_NAME}:${BUILDKITE_BUILD_NUMBER}
	docker image push ${IMAGE_NAME}:${BUILDKITE_BRANCH}
	docker image push ${IMAGE_NAME}:latest

clean: ## Cleanup artifacts generated by build.
	@echo "--- :shower: Cleaning up :shower:"
	-docker container prune -f &> /dev/null
	-docker image rm -f redbubble/${IMAGE_NAME}:latest &> /dev/null
	-docker image rm -f redbubble/${IMAGE_NAME}:${BUILDKITE_BRANCH} &> /dev/null
	-docker image rm -f redbubble/${IMAGE_NAME}:${BUILDKITE_BUILD_NUMBER} &> /dev/null
	-docker system prune -f &> /dev/null

all: build tag push